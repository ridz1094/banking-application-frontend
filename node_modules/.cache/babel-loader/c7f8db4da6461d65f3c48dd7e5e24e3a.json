{"ast":null,"code":"/*\nLanguage: Elixir\nAuthor: Josh Adams <josh@isotope11.com>\nDescription: language definition for Elixir source code files (.ex and .exs).  Based on ruby language support.\nCategory: functional\nWebsite: https://elixir-lang.org\n*/\nfunction elixir(hljs) {\n  var ELIXIR_IDENT_RE = '[a-zA-Z_][a-zA-Z0-9_.]*(\\\\!|\\\\?)?';\n  var ELIXIR_METHOD_RE = '[a-zA-Z_]\\\\w*[!?=]?|[-+~]\\\\@|<<|>>|=~|===?|<=>|[<>]=?|\\\\*\\\\*|[-/+%^&*~`|]|\\\\[\\\\]=?';\n  var ELIXIR_KEYWORDS = 'and false then defined module in return redo retry end for true self when ' + 'next until do begin unless nil break not case cond alias while ensure or ' + 'include use alias fn quote require import with|0';\n  var SUBST = {\n    className: 'subst',\n    begin: '#\\\\{',\n    end: '}',\n    lexemes: ELIXIR_IDENT_RE,\n    keywords: ELIXIR_KEYWORDS\n  };\n  var NUMBER = {\n    className: 'number',\n    begin: '(\\\\b0o[0-7_]+)|(\\\\b0b[01_]+)|(\\\\b0x[0-9a-fA-F_]+)|(-?\\\\b[1-9][0-9_]*(.[0-9_]+([eE][-+]?[0-9]+)?)?)',\n    relevance: 0\n  };\n  var SIGIL_DELIMITERS = '[/|([{<\"\\']';\n  var LOWERCASE_SIGIL = {\n    className: 'string',\n    begin: '~[a-z]' + '(?=' + SIGIL_DELIMITERS + ')',\n    contains: [{\n      endsParent: true,\n      contains: [{\n        contains: [hljs.BACKSLASH_ESCAPE, SUBST],\n        variants: [{\n          begin: /\"/,\n          end: /\"/\n        }, {\n          begin: /'/,\n          end: /'/\n        }, {\n          begin: /\\//,\n          end: /\\//\n        }, {\n          begin: /\\|/,\n          end: /\\|/\n        }, {\n          begin: /\\(/,\n          end: /\\)/\n        }, {\n          begin: /\\[/,\n          end: /\\]/\n        }, {\n          begin: /\\{/,\n          end: /\\}/\n        }, {\n          begin: /</,\n          end: />/\n        }]\n      }]\n    }]\n  };\n  var UPCASE_SIGIL = {\n    className: 'string',\n    begin: '~[A-Z]' + '(?=' + SIGIL_DELIMITERS + ')',\n    contains: [{\n      begin: /\"/,\n      end: /\"/\n    }, {\n      begin: /'/,\n      end: /'/\n    }, {\n      begin: /\\//,\n      end: /\\//\n    }, {\n      begin: /\\|/,\n      end: /\\|/\n    }, {\n      begin: /\\(/,\n      end: /\\)/\n    }, {\n      begin: /\\[/,\n      end: /\\]/\n    }, {\n      begin: /\\{/,\n      end: /\\}/\n    }, {\n      begin: /\\</,\n      end: /\\>/\n    }]\n  };\n  var STRING = {\n    className: 'string',\n    contains: [hljs.BACKSLASH_ESCAPE, SUBST],\n    variants: [{\n      begin: /\"\"\"/,\n      end: /\"\"\"/\n    }, {\n      begin: /'''/,\n      end: /'''/\n    }, {\n      begin: /~S\"\"\"/,\n      end: /\"\"\"/,\n      contains: []\n    }, {\n      begin: /~S\"/,\n      end: /\"/,\n      contains: []\n    }, {\n      begin: /~S'''/,\n      end: /'''/,\n      contains: []\n    }, {\n      begin: /~S'/,\n      end: /'/,\n      contains: []\n    }, {\n      begin: /'/,\n      end: /'/\n    }, {\n      begin: /\"/,\n      end: /\"/\n    }]\n  };\n  var FUNCTION = {\n    className: 'function',\n    beginKeywords: 'def defp defmacro',\n    end: /\\B\\b/,\n    // the mode is ended by the title\n    contains: [hljs.inherit(hljs.TITLE_MODE, {\n      begin: ELIXIR_IDENT_RE,\n      endsParent: true\n    })]\n  };\n  var CLASS = hljs.inherit(FUNCTION, {\n    className: 'class',\n    beginKeywords: 'defimpl defmodule defprotocol defrecord',\n    end: /\\bdo\\b|$|;/\n  });\n  var ELIXIR_DEFAULT_CONTAINS = [STRING, UPCASE_SIGIL, LOWERCASE_SIGIL, hljs.HASH_COMMENT_MODE, CLASS, FUNCTION, {\n    begin: '::'\n  }, {\n    className: 'symbol',\n    begin: ':(?![\\\\s:])',\n    contains: [STRING, {\n      begin: ELIXIR_METHOD_RE\n    }],\n    relevance: 0\n  }, {\n    className: 'symbol',\n    begin: ELIXIR_IDENT_RE + ':(?!:)',\n    relevance: 0\n  }, NUMBER, {\n    className: 'variable',\n    begin: '(\\\\$\\\\W)|((\\\\$|\\\\@\\\\@?)(\\\\w+))'\n  }, {\n    begin: '->'\n  }, {\n    // regexp container\n    begin: '(' + hljs.RE_STARTERS_RE + ')\\\\s*',\n    contains: [hljs.HASH_COMMENT_MODE, {\n      // to prevent false regex triggers for the division function:\n      // /:\n      begin: /\\/: (?=\\d+\\s*[,\\]])/,\n      relevance: 0,\n      contains: [NUMBER]\n    }, {\n      className: 'regexp',\n      illegal: '\\\\n',\n      contains: [hljs.BACKSLASH_ESCAPE, SUBST],\n      variants: [{\n        begin: '/',\n        end: '/[a-z]*'\n      }, {\n        begin: '%r\\\\[',\n        end: '\\\\][a-z]*'\n      }]\n    }],\n    relevance: 0\n  }];\n  SUBST.contains = ELIXIR_DEFAULT_CONTAINS;\n  return {\n    name: 'Elixir',\n    lexemes: ELIXIR_IDENT_RE,\n    keywords: ELIXIR_KEYWORDS,\n    contains: ELIXIR_DEFAULT_CONTAINS\n  };\n}\n\nmodule.exports = elixir;","map":{"version":3,"sources":["/Users/ridz/Desktop/Sem 2/CMPE-202/TeamProject/team-project-data_divers/frontend/node_modules/highlight.js/lib/languages/elixir.js"],"names":["elixir","hljs","ELIXIR_IDENT_RE","ELIXIR_METHOD_RE","ELIXIR_KEYWORDS","SUBST","className","begin","end","lexemes","keywords","NUMBER","relevance","SIGIL_DELIMITERS","LOWERCASE_SIGIL","contains","endsParent","BACKSLASH_ESCAPE","variants","UPCASE_SIGIL","STRING","FUNCTION","beginKeywords","inherit","TITLE_MODE","CLASS","ELIXIR_DEFAULT_CONTAINS","HASH_COMMENT_MODE","RE_STARTERS_RE","illegal","name","module","exports"],"mappings":"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","sourcesContent":["/*\nLanguage: Elixir\nAuthor: Josh Adams <josh@isotope11.com>\nDescription: language definition for Elixir source code files (.ex and .exs).  Based on ruby language support.\nCategory: functional\nWebsite: https://elixir-lang.org\n*/\n\nfunction elixir(hljs) {\n  var ELIXIR_IDENT_RE = '[a-zA-Z_][a-zA-Z0-9_.]*(\\\\!|\\\\?)?';\n  var ELIXIR_METHOD_RE = '[a-zA-Z_]\\\\w*[!?=]?|[-+~]\\\\@|<<|>>|=~|===?|<=>|[<>]=?|\\\\*\\\\*|[-/+%^&*~`|]|\\\\[\\\\]=?';\n  var ELIXIR_KEYWORDS =\n    'and false then defined module in return redo retry end for true self when ' +\n    'next until do begin unless nil break not case cond alias while ensure or ' +\n    'include use alias fn quote require import with|0';\n  var SUBST = {\n    className: 'subst',\n    begin: '#\\\\{', end: '}',\n    lexemes: ELIXIR_IDENT_RE,\n    keywords: ELIXIR_KEYWORDS\n  };\n  var NUMBER = {\n    className: 'number',\n    begin: '(\\\\b0o[0-7_]+)|(\\\\b0b[01_]+)|(\\\\b0x[0-9a-fA-F_]+)|(-?\\\\b[1-9][0-9_]*(.[0-9_]+([eE][-+]?[0-9]+)?)?)',\n    relevance: 0\n  };\n  var SIGIL_DELIMITERS = '[/|([{<\"\\']';\n  var LOWERCASE_SIGIL = {\n    className: 'string',\n    begin: '~[a-z]' + '(?=' + SIGIL_DELIMITERS + ')',\n    contains: [\n      {\n        endsParent:true,\n        contains: [{\n          contains: [hljs.BACKSLASH_ESCAPE, SUBST],\n          variants: [\n            { begin: /\"/, end: /\"/ },\n            { begin: /'/, end: /'/ },\n            { begin: /\\//, end: /\\// },\n            { begin: /\\|/, end: /\\|/ },\n            { begin: /\\(/, end: /\\)/ },\n            { begin: /\\[/, end: /\\]/ },\n            { begin: /\\{/, end: /\\}/ },\n            { begin: /</, end: />/ }\n          ]\n        }]\n      },\n    ],\n  };\n\n  var UPCASE_SIGIL = {\n    className: 'string',\n    begin: '~[A-Z]' + '(?=' + SIGIL_DELIMITERS + ')',\n    contains: [\n      { begin: /\"/, end: /\"/ },\n      { begin: /'/, end: /'/ },\n      { begin: /\\//, end: /\\// },\n      { begin: /\\|/, end: /\\|/ },\n      { begin: /\\(/, end: /\\)/ },\n      { begin: /\\[/, end: /\\]/ },\n      { begin: /\\{/, end: /\\}/ },\n      { begin: /\\</, end: /\\>/ }\n    ]\n  };\n\n  var STRING = {\n    className: 'string',\n    contains: [hljs.BACKSLASH_ESCAPE, SUBST],\n    variants: [\n      {\n        begin: /\"\"\"/, end: /\"\"\"/,\n      },\n      {\n        begin: /'''/, end: /'''/,\n      },\n      {\n        begin: /~S\"\"\"/, end: /\"\"\"/,\n        contains: []\n      },\n      {\n        begin: /~S\"/, end: /\"/,\n        contains: []\n      },\n      {\n        begin: /~S'''/, end: /'''/,\n        contains: []\n      },\n      {\n        begin: /~S'/, end: /'/,\n        contains: []\n      },\n      {\n        begin: /'/, end: /'/\n      },\n      {\n        begin: /\"/, end: /\"/\n      },\n    ]\n  };\n  var FUNCTION = {\n    className: 'function',\n    beginKeywords: 'def defp defmacro', end: /\\B\\b/, // the mode is ended by the title\n    contains: [\n      hljs.inherit(hljs.TITLE_MODE, {\n        begin: ELIXIR_IDENT_RE,\n        endsParent: true\n      })\n    ]\n  };\n  var CLASS = hljs.inherit(FUNCTION, {\n    className: 'class',\n    beginKeywords: 'defimpl defmodule defprotocol defrecord', end: /\\bdo\\b|$|;/\n  });\n  var ELIXIR_DEFAULT_CONTAINS = [\n    STRING,\n    UPCASE_SIGIL,\n    LOWERCASE_SIGIL,\n    hljs.HASH_COMMENT_MODE,\n    CLASS,\n    FUNCTION,\n    {\n      begin: '::'\n    },\n    {\n      className: 'symbol',\n      begin: ':(?![\\\\s:])',\n      contains: [STRING, {begin: ELIXIR_METHOD_RE}],\n      relevance: 0\n    },\n    {\n      className: 'symbol',\n      begin: ELIXIR_IDENT_RE + ':(?!:)',\n      relevance: 0\n    },\n    NUMBER,\n    {\n      className: 'variable',\n      begin: '(\\\\$\\\\W)|((\\\\$|\\\\@\\\\@?)(\\\\w+))'\n    },\n    {\n      begin: '->'\n    },\n    { // regexp container\n      begin: '(' + hljs.RE_STARTERS_RE + ')\\\\s*',\n      contains: [\n        hljs.HASH_COMMENT_MODE,\n        {\n          // to prevent false regex triggers for the division function:\n          // /:\n          begin: /\\/: (?=\\d+\\s*[,\\]])/,\n          relevance: 0,\n          contains: [\n            NUMBER\n          ]\n        },\n        {\n          className: 'regexp',\n          illegal: '\\\\n',\n          contains: [hljs.BACKSLASH_ESCAPE, SUBST],\n          variants: [\n            {\n              begin: '/', end: '/[a-z]*'\n            },\n            {\n              begin: '%r\\\\[', end: '\\\\][a-z]*'\n            }\n          ]\n        }\n      ],\n      relevance: 0\n    }\n  ];\n  SUBST.contains = ELIXIR_DEFAULT_CONTAINS;\n\n  return {\n    name: 'Elixir',\n    lexemes: ELIXIR_IDENT_RE,\n    keywords: ELIXIR_KEYWORDS,\n    contains: ELIXIR_DEFAULT_CONTAINS\n  };\n}\n\nmodule.exports = elixir;\n"]},"metadata":{},"sourceType":"script"}